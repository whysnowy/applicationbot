import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command

API_TOKEN = '7878301618:AAG8Uw6NpnwFAL1cSyakRPviSlIlI9pjzYg'
ADMIN_CHAT_ID = -1002222107724  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ ID –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
dp = Dispatcher(storage=MemoryStorage())

class Form(StatesGroup):
    age = State()
    nickname = State()
    source = State()
    plans = State()

start_inline_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìù –ü—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É", callback_data="start_form")]
])

links_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="Discord —Å–µ—Ä–≤–µ—Ä", url="https://discord.gg/MczamQxGQK")],
    [InlineKeyboardButton(text="Telegram-–∫–∞–Ω–∞–ª", url="https://t.me/decrafted")]
])

@dp.message(Command("start"))
async def start(message: Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä DeCrafted!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è.",
        reply_markup=start_inline_kb
    )

@dp.callback_query(F.data == "start_form")
async def handle_start_form(callback: CallbackQuery, state: FSMContext):
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass
    await state.set_state(Form.age)
    await callback.message.answer("üìÖ –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
    await callback.answer()

@dp.message(Form.age)
async def process_age(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    await state.set_state(Form.nickname)
    await message.answer("üë§ –ö–∞–∫–æ–π —É –≤–∞—Å –Ω–∏–∫ –≤ –ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç–µ?")

@dp.message(Form.nickname)
async def process_nick(message: Message, state: FSMContext):
    await state.update_data(nickname=message.text)
    await state.set_state(Form.source)
    await message.answer("üì¢ –û—Ç–∫—É–¥–∞ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ?")

@dp.message(Form.source)
async def process_source(message: Message, state: FSMContext):
    await state.update_data(source=message.text)
    await state.set_state(Form.plans)
    await message.answer("üîß –ß–µ–º –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ?")

@dp.message(Form.plans)
async def process_plans(message: Message, state: FSMContext):
    await state.update_data(plans=message.text)
    data = await state.get_data()
    await state.clear()

    text = (
        f"–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –æ—Ç @{message.from_user.username or message.from_user.full_name}:\n\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
        f"–ù–∏–∫: {data['nickname']}\n"
        f"–ò—Å—Ç–æ—á–Ω–∏–∫: {data['source']}\n"
        f"–ü–ª–∞–Ω—ã: {data['plans']}"
    )

    admin_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{message.from_user.id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"deny_{message.from_user.id}")
        ]
    ])

    await bot.send_message(chat_id=ADMIN_CHAT_ID, text=text, reply_markup=admin_kb)
    await message.answer(
        "‚úÖ –ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç."
    )

@dp.callback_query(F.data.startswith("approve_"))
async def approve(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await bot.send_message(
        chat_id=user_id,
        text="‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n–í—ã –±—É–¥–µ—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞–π—Ç–ª–∏—Å—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n–ê –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏!",
        reply_markup=links_kb
    )

    new_text = callback.message.text
    if "‚úÖ –ê–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞" not in new_text:
        new_text += "\n\n‚úÖ –ê–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞"
        try:
            await callback.message.edit_text(new_text)
        except Exception:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
            pass
    # –û—Ç–≤–µ—Ç –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ä—ã–π ‚Äî —Å—Ç–∞–≤–∏–º cache_time=0
    await callback.answer(cache_time=0)

@dp.callback_query(F.data.startswith("deny_"))
async def deny(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    await bot.send_message(
        chat_id=user_id,
        text="‚ùå –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –µ—ë –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start.",
        reply_markup=start_inline_kb
    )
    new_text = callback.message.text
    if "‚ùå –ê–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞" not in new_text:
        new_text += "\n\n‚ùå –ê–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
        try:
            await callback.message.edit_text(new_text)
        except Exception:
            pass
    await callback.answer(cache_time=0)

@dp.message(F.text == "üìù –ü—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ")
async def retry_form(message: Message, state: FSMContext):
    await state.set_state(Form.age)
    await message.answer("üìÖ –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")

if __name__ == '__main__':
    asyncio.run(dp.start_polling(bot))
